diff --git a/polyhook2/IHook.hpp b/polyhook2/IHook.hpp
index f921611..dead4cf 100644
--- a/polyhook2/IHook.hpp
+++ b/polyhook2/IHook.hpp
@@ -32,132 +32,82 @@ _Pragma("GCC optimize (\"O0\")")
 namespace PLH {
 class IHook : public MemAccessor {
 public:
-	IHook() {
-		m_debugSet = false;
-		m_hooked = false;
-	}
+    IHook() : m_debugSet(false), m_hooked(false) {}
 
-	IHook(IHook&& other) = default; //move
-	IHook& operator=(IHook&& other) = default;//move assignment
-	IHook(const IHook& other) = delete; //copy
-	IHook& operator=(const IHook& other) = delete; //copy assignment
-	virtual ~IHook() = default;
+    IHook(IHook&& other) = default; // Move constructor
+    IHook& operator=(IHook&& other) = default; // Move assignment
+    IHook(const IHook& other) = delete; // Copy constructor
+    IHook& operator=(const IHook& other) = delete; // Copy assignment
+    virtual ~IHook() = default;
 
-	virtual bool hook() = 0;
+    virtual bool hook() = 0;
+    virtual bool unHook() = 0;
 
-	virtual bool unHook() = 0;
+    virtual bool reHook() {
+        return true;
+    }
 
-	// this is allowed to be nothing by default
-	virtual bool reHook() {
-		return true;
-	}
+    virtual bool setHooked(const bool state) {
+        if (m_hooked == state)
+            return true;
 
-	virtual bool setHooked(const bool state) {
-		if (m_hooked == state)
-			return true;
+        return state ? hook() : unHook();
+    }
 
-		return state ? hook() : unHook();
-	}
+    virtual bool isHooked() {
+        return m_hooked;
+    }
 
-	virtual bool isHooked() {
-		return m_hooked;
-	}
+    virtual HookType getType() const = 0;
 
-	virtual HookType getType() const = 0;
-
-	virtual void setDebug(const bool state) {
-		m_debugSet = state;
-	}
+    virtual void setDebug(const bool state) {
+        m_debugSet = state;
+    }
 
 protected:
-	bool m_debugSet;
-	bool m_hooked = false;
+    bool m_debugSet;
+    bool m_hooked;
 };
 
-//Thanks @_can1357 for help with this.
+// Template utilities for callback handling
 template<typename T, typename = void>
 struct callback_type { using type = T; };
 
-// from all the overloads below return the entire function type of whichever casts successfully
 template<typename T>
 using callback_type_t = typename callback_type<T>::type;
 
-// from all the overloads below return just the return type of whichever casts successfully
 template<typename T>
 using callback_return_type_t = typename callback_type<T>::return_type;
 
-// given a value, call callback_type_t on its type
 template<auto V>
 using callback_type_v = typename callback_type<decltype(V)>::type;
 
-#define MAKE_CALLBACK_IMPL(CCFROM, CCTO) template<typename F, typename Ret, typename... Args> \
-auto make_callback(Ret(CCFROM*)(Args...), F&& f) \
-{ \
-    Ret(CCTO * fn)(Args...) = f; \
-    return fn; \
-} \
-template<typename Ret, typename... Args> \
-struct callback_type<Ret(CCFROM*)(Args...), void> \
-{ \
-    using type = Ret(CCTO*)(Args...); \
-    using return_type = Ret; \
-};
+// Inline make_callback implementation to prevent redefinition errors
+template<typename F, typename Ret, typename... Args>
+inline auto make_callback(Ret(*)(Args...), F&& f) {
+    Ret(*fn)(Args...) = f;
+    return fn;
+}
 
-// switch to __VA_OPT__ when C++ 2a release. MSVC removes comma before empty __VA_ARGS__ as is.
-// https://devblogs.microsoft.com/cppblog/msvc-preprocessor-progress-towards-conformance/
-#define MAKE_CALLBACK_CLASS_IMPL(CCFROM, CCTO, ...) template<typename F, typename Ret, typename Class, typename... Args> \
-auto make_callback(Ret(CCFROM Class::*)(Args...), F&& f) \
-{ \
-    Ret(CCTO * fn)(Class*, ## __VA_ARGS__, Args...) = f; \
-    return fn; \
-} \
-template<typename Ret, typename Class, typename... Args> \
-struct callback_type<Ret(CCFROM Class::*)(Args...), void> \
-{ \
-    using type = Ret(CCTO*)(Class*, ## __VA_ARGS__, Args...); \
-    using return_type = Ret; \
+template<typename Ret, typename... Args>
+struct callback_type<Ret(*)(Args...), void> {
+    using type = Ret(*)(Args...);
+    using return_type = Ret;
 };
 
-#ifndef _MSC_VER
-#define __cdecl __attribute__((__cdecl__))
-#define __fastcall __attribute__((__fastcall__))
-#define __stdcall __attribute__((__stdcall__))
-#endif
-
-#ifndef POLYHOOK2_ARCH_X64
-MAKE_CALLBACK_IMPL(__stdcall, __stdcall)
-MAKE_CALLBACK_CLASS_IMPL(__stdcall, __stdcall)
-
-MAKE_CALLBACK_IMPL(__cdecl, __cdecl)
-MAKE_CALLBACK_CLASS_IMPL(__cdecl, __cdecl)
-
-MAKE_CALLBACK_IMPL(__thiscall, __thiscall)
-MAKE_CALLBACK_CLASS_IMPL(__thiscall, __fastcall, char*)
-#endif
-
-MAKE_CALLBACK_IMPL(__fastcall, __fastcall)
-MAKE_CALLBACK_CLASS_IMPL(__fastcall, __fastcall)
-
 template <int I, class... Ts>
 decltype(auto) get_pack_idx(Ts&&... ts) {
-	return std::get<I>(std::forward_as_tuple(ts...));
-}
+    return std::get<I>(std::forward_as_tuple(ts...));
 }
 
-/**
-Creates a hook callback function pointer that matches the type of a given function definition. The name variable
-will be a pointer to the function, and the variables _args... and name_t will be created to represent the original
-arguments of the function and the type of the callback respectively.
-**/
+// Macro for creating hook callbacks
 #define HOOK_CALLBACK(pType, name, body) \
     typedef PLH::callback_type_t<decltype(pType)> name##_t; \
-    PLH::callback_type_t<decltype(pType)> (name) = PLH::make_callback(pType, [](auto... _args) -> PLH::callback_return_type_t<decltype(pType)> body) // NOLINT(bugprone-macro-parentheses)
+    PLH::callback_type_t<decltype(pType)> (name) = PLH::make_callback(pType, [](auto... _args) -> PLH::callback_return_type_t<decltype(pType)> body)
 
-/**
-When using the HOOK_CALLBACK macro this helper utility can be used to retreive one of the original
-arguments by index. The type and value will exactly match that of the original function at that index.
-for member functions this is essentially 1's indexed because first param is this*
-**/
+// Macro for retrieving arguments by index in a hook callback
 #define GET_ARG(idx) PLH::get_pack_idx<idx>(_args...)
 
-#endif //POLYHOOK_2_0_IHOOK_HPP
+} // namespace PLH
+
+#endif // POLYHOOK_2_0_IHOOK_HPP
diff --git a/sources/PolyHookOs.cpp b/sources/PolyHookOs.cpp
index 6f3cdb0..dcf10e5 100644
--- a/sources/PolyHookOs.cpp
+++ b/sources/PolyHookOs.cpp
@@ -12,14 +12,28 @@ void PolyHook2DebugBreak()
 
 void PolyHook2DebugBreak()
 {
-    __asm__("int3");
+    // __asm__("int3");
+    #if defined(__x86_64__) || defined(_M_X64)
+        __asm__("int3");
+    #elif defined(__aarch64__)
+        __asm__("brk #0");
+    #else
+        // 다른 아키텍처에서는 아무 작업도 하지 않음
+    #endif
 }
 
 #elif defined(POLYHOOK2_OS_APPLE)
 
 void PolyHook2DebugBreak()
 {
-    __asm__("int3");
+    // __asm__("int3");
+    #if defined(__x86_64__) || defined(_M_X64)
+        __asm__("int3");
+    #elif defined(__aarch64__)
+        __asm__("brk #0");
+    #else
+        // 다른 아키텍처에서는 아무 작업도 하지 않음
+    #endif
 }
 
 #endif
